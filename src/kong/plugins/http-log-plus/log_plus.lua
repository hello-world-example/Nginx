---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by kail.
--- DateTime: 2020/11/27 18:30
---
local _M = {}

---
--- 获取请求体
---
local function get_request_body(ngx)
    ngx.req.read_body()
    return ngx.req.get_body_data()
end

---
--- 响应头匹配
---
local function contentTypeMatch(KongLog, pattern, def)
    if (pattern == nil or pattern == "nil" or #pattern <= 0) then
        return def
    end

    return ngx.re.match(KongLog.response.headers['content-type'], pattern)
end

---
--- Nginx access 阶段，获取请求信息
---
--- ngx.ctx.http_log_plus.resp_body
---
function _M.access(ngx, conf)
    -- 定义全局变量
    ngx.ctx.http_log_plus = { req_body = "", resp_body = "" }

    -- plus_request_body 开关
    if (conf.plus_request_body) then
        ngx.ctx.http_log_plus = { req_body = get_request_body(ngx) }
    end
end

---
--- Nginx body_filter 阶段，获取响应
---
--- ngx.ctx.http_log_plus.resp_body
---
function _M.body_filter(ngx, conf)
    -- plus_response_body 开关
    if (conf.plus_response_body) then
        local chunk = ngx.arg[1]
        local ctx = ngx.ctx

        -- chunk 时该方法会被调用多次
        local resp_body = ctx.http_log_plus and ctx.http_log_plus.resp_body or ""
        resp_body = resp_body .. (chunk or "")
        ctx.http_log_plus.resp_body = resp_body
    end
end

---
--- 扩充原始字段
--- 原始格式： https://docs.konghq.com/2.2.x/pdk/kong.log/
---
function _M.log_plus(kong, ngx, conf)
    local KongLog = kong.log.serialize()

    --- 自定义扩展信息
    local http_log_plus = ngx.ctx.http_log_plus or {}

    -- 请求体
    if (conf.plus_request_body) then
        KongLog.request.body = http_log_plus.req_body
    end
    -- 响应体
    if (conf.plus_response_body) then
        KongLog.response.body = http_log_plus.resp_body
    end

    -- 不匹配指定的规则
    if not contentTypeMatch(KongLog, conf.plus_response_content_type_pattern_include, true) then
        return nil
    end
    -- 匹配排除规则
    if contentTypeMatch(KongLog, conf.plus_response_content_type_pattern_exclude, false) then
        return nil
    end

    return KongLog

end

return _M