<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Nginx</title>
    <link>https://hello-world-example.github.io/Nginx/docs/</link>
    <description>Recent content in Docs on Nginx</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/Nginx/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/Nginx/ngx_http_core_module/listen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/Nginx/ngx_http_core_module/listen/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/Nginx/ngx_http_core_module/location/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/Nginx/ngx_http_core_module/location/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/Nginx/ngx_http_log_module/access_log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/Nginx/ngx_http_log_module/access_log/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/Nginx/ngx_http_proxy_module/proxy_pass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/Nginx/ngx_http_proxy_module/proxy_pass/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/Nginx/ngx_http_upstream_module/upstream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/Nginx/ngx_http_upstream_module/upstream/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/Nginx/Tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/Nginx/Tips/</guid>
      <description>Tips 安装的模块 $ ./nginx/sbin/nginx -V ... built by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) built with OpenSSL 1.0.2h 3 May 2016 TLS SNI support enabled configure arguments: --prefix=/usr/local/openresty/nginx --add-module=../ngx_devel_kit-0.3.0 ... --with-openssl=/tmp/openssl-1.0.2h --with-pcre=/tmp/pcre-8.39 ... --with-stream ... </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/OpenResty/Directives-Lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/OpenResty/Directives-Lifecycle/</guid>
      <description>指令与生命周期 执行顺序  脚本类指令    指令 Context 阶段 简介 作用     init_by_lua* http loading-config 主进程加载配置文件时执行 预加载模块、等
！不要创建全局变量，避免变量污染   init_worker_by_lua* http starting-worker 每个 Worker 进程启动时执行 Worker 计数器、等   &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;   ssl_certificate_by_lua_* server right-before-SSL-handshake 与下游 SSL 握手之前执行    ssl_session_fetch_by_lua_* http right-before-SSL-handshake 根据下游提供的 sessionid 进行一些操作 缓存、等   ssl_session_store_by_lua_* http right-after-SSL-handshake SSL 握手之后执行    &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;   set_by_lua* server</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/OpenResty/Install-By-Docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/OpenResty/Install-By-Docker/</guid>
      <description>Docker 方式安装 安装 $ docker pull openresty/openresty:1.11.2.1-centos $ docker run -d \ 	-p 80:80 \  --name openresty \  -v /private/docker/volumes/openresty/conf.d:/etc/nginx/conf.d \  -v /private/docker/volumes/openresty/logs:/etc/nginx/logs \  openresty/openresty:1.11.2.1-centos # docker exec -it openresty bash # cd /usr/local/openresty/nginx/ # docker kill openresty # docker rm openresty # docker ps -a | grep openresty /etc/nginx/conf.d/ 进入 /private/docker/volumes/openresty/conf.d 新增 一下两个文件，文件内容是从 nginx.conf 中截取的
default.conf server { listen 80 default_server reuseport; server_name localhost; #charset koi8-r;  #access_log logs/host.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/OpenResty/Resty-Cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/OpenResty/Resty-Cli/</guid>
      <description>Resty-Cli 该指令在 OpenResty 安装后自带，用来测试运行在 OpenResty 中的脚本
$ ll /usr/local/openresty/bin/resty* /usr/local/openresty/bin/resty /usr/local/openresty/bin/restydoc /usr/local/openresty/bin/restydoc-index resty  -e 执行脚本语句 xxx.lua 执行 lua 文件 -V 查看版本  --shdict=&#39;dogs 1m&#39; 指定共享变量  # 单行 $ ./bin/resty -e &amp;#34;ngx.say(&amp;#39;hello&amp;#39;)&amp;#34; # 多行 $ ./bin/resty -e &amp;#34; local name = &amp;#39;World&amp;#39; ngx.say(&amp;#39;Hello &amp;#39;..name) &amp;#34; # 执行 Nginx API Lua 文件 $ ./bin/resty /etc/nginx/conf.d/lua/unit_test_regex.lua # 共享字典 $ ./bin/resty --shdict=&amp;#39;dogs 1m&amp;#39; \  -e &amp;#39;local dict = ngx.shared.dogs print(dict:get(&amp;#34;Tom&amp;#34;)) dict:set(&amp;#34;Tom&amp;#34;, 56) print(dict:get(&amp;#34;Tom&amp;#34;))&amp;#39; restydoc 查看 指令&amp;amp;API 帮助文档</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/OpenResty/Test-Lua/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/OpenResty/Test-Lua/</guid>
      <description>Lua 脚本测试 print / say  ngx.say 自动添加换行符 ngx.print 没有换行符  location = /test/print { default_type &amp;#39;text/plain&amp;#39;; content_by_lua_block { ngx.print(&amp;#39;Hello,world!&amp;#39;) } } location = /test/say { default_type &amp;#39;text/plain&amp;#39;; content_by_lua_block { ngx.say(&amp;#39;Hello,world!&amp;#39;) } } GET 请求参数 location = /test/params { default_type &amp;#39;text/plain&amp;#39;; # /test/params?a=hello&amp;amp;a=world&amp;amp;a_b=hello world content_by_lua_block { -- 获取第一个参数 ngx.say(ngx.var.args) ngx.say(ngx.var.arg_a) ngx.say(ngx.var.arg_a_b) ngx.say(ngx.unescape_uri(ngx.var.arg_a_b)) ngx.say() -- 获取参数列表 local args, err = ngx.req.get_uri_args() for key, val in pairs(args) do if type(val) == &amp;#34;table&amp;#34; then ngx.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/OpenResty/Tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/OpenResty/Tips/</guid>
      <description>Tips 查看版本 $ cd /usr/local/openresty $ ll bin/ openresty -&amp;gt; /usr/local/openresty/nginx/sbin/nginx $ ./nginx/sbin/nginx -v nginx version: openresty/1.11.2.1 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Nginx/docs/TODO/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Nginx/docs/TODO/</guid>
      <description>TODO  Nginx 生命周期 时间函数 https://www.jianshu.com/p/d2a5e669b529 OpenResty API  https://www.jianshu.com/p/7b7c7c8264a3 https://www.jianshu.com/p/997e775a396d    </description>
    </item>
    
  </channel>
</rss>